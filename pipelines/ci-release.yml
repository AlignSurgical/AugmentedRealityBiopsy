# CI build for release packages.

# Change the BuildNumber to be SemVer 1.0.0 compatible
name: $(Date:yyyyMMdd)v$(Rev:r)

variables:
  Unity2018Version: Unity2018.3.7f1
  Unity2019Version: Unity2019.2.0f1
  MRTKVersion: 2.3.0  # Major.Minor.Patch
  MRTKReleaseTag: ''  # final version component, e.g. 'RC2.1' or empty string

jobs:
- job: CIReleaseValidation
  timeoutInMinutes: 90
  pool:
    name: Analog On-Prem
    demands:
    - Unity2018.3.7f1  # variable expansion not allowed here
    - COG-UnityCache-WUS2-01
    - SDK_18362 -equals TRUE
  steps:
  - template: templates/compilemsbuild.yml
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)\NuGet'
      ArtifactName: 'NuGet'
  - template: templates/end.yml

- job: ReleaseSigning
  dependsOn: CIReleaseValidation
  pool:
    name: Package ES Lab E
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'NuGet'
      downloadPath: '$(Build.SourcesDirectory)'

  - powershell: |
      $Authorization = "Basic " + [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes('$(scriptsRepoVSTSuser):$(scriptsRepoPAT)'))
      git clone -c http.extraheader="AUTHORIZATION: $Authorization" -b mrtk $(scriptsRepoURL) $(Build.ArtifactStagingDirectory)\scripts
    displayName: "Clone release scripts"

  - powershell: |
      $(Build.ArtifactStagingDirectory)/scripts/generateSignConfigs.ps1 -Directory $(Build.SourcesDirectory)/NuGet -OutputDirectory $(Build.ArtifactStagingDirectory)/configs
    displayName: "Generate signing configs"

  # required for code signing
  - task: ComponentGovernanceComponentDetection@0
    inputs:
      scanType: 'Register'
      verbosity: 'Verbose'
      alertWarningLevel: 'High'

  # sign all DLLs
  - template: templates/tasks/signing.yml
    parameters:
      ConfigName: "$(Build.ArtifactStagingDirectory)/configs/MRTKSignConfig.xml"

  # Create pre-release packages
  - ${{ if eq(variables['MRTKReleaseTag'], '') }}:
    - template: templates/package.yml
      parameters:
        version: '$(MRTKVersion)-$(Build.BuildNumber)'
        packDestination: '$(Build.SourcesDirectory)\artifacts\prerelease'
  - ${{ if ne(variables['MRTKReleaseTag'], '') }}:
    - template: templates/package.yml
      parameters:
        version: '$(MRTKVersion)-$(Build.BuildNumber).$(MRTKReleaseTag)'
        packDestination: '$(Build.SourcesDirectory)\artifacts\prerelease'

  # Create release packages
  - ${{ if eq(variables['MRTKReleaseTag'], '') }}:
    - template: templates/package.yml
      parameters:
        version: '$(MRTKVersion)'
        packDestination: '$(Build.SourcesDirectory)\artifacts\release'
  - ${{ if ne(variables['MRTKReleaseTag'], '') }}:
    - template: templates/package.yml
      parameters:
        version: '$(MRTKVersion)-$(MRTKReleaseTag)'
        packDestination: '$(Build.SourcesDirectory)\artifacts\release'        

  - template: templates/tasks/signing.yml
    parameters:
      ConfigName: "$(Build.ArtifactStagingDirectory)/configs/MRTKNuGetSignConfig.xml"

  - task: PowerShell@2
    displayName: 'Validate release packages are signed'
    inputs:
      targetType: filePath
      filePath: '$(Build.ArtifactStagingDirectory)\scripts\signCheck.ps1'
      arguments: '$(Build.SourcesDirectory)\artifacts\release -tmpDir $(Build.ArtifactStagingDirectory)'
  
  - powershell: |
      Remove-Item "$(Build.SourcesDirectory)/artifacts/release/Microsoft.MixedReality.Toolkit.Tests.*"
    displayName: "Delete MixedReality.Toolkit.Tests package from the release artifacts"

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Packages'
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)\artifacts'
      ArtifactName: 'mrtk-unity-packages'

  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2  # NuGetCommand
    displayName: 'NuGet push'
    inputs:
      command: push
      packagesToPush: '$(Build.SourcesDirectory)/artifacts/prerelease/**/*.nupkg;!$(Build.SourcesDirectory)/artifacts/prerelease/**/*.symbols.nupkg'
      publishVstsFeed: '$(NuGetFeedId)'
      buildProperties: 'version=$(MRTKVersion)-$(Build.BuildNumber)'
